service:
  name: my-lambda
  description: blablabla

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  # - serverless-apigw/-binary
  # - serverless-apigwy-binary

package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
    - node_modules/**
    - .git/**
    - .serverless/**
    - yarn.lock
    - package-lock.json
#    - exclude-me.js
#    - exclude-me-dir/**
  excludeDevDependencies: true  

custom:
  bucket: devtool-plugins
  dynamodb_table: DevTool-ApiKeys #${self:service.name}-${opt:stage, self:provider.stage}
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  role: arn:aws:iam::1234567890:role/lambda_basic_execution
  apiKeys:
    - superAdminKey
  environment:
    NODE_ENV: PRODUCTION
    S3_BUCKET: ${self:custom.bucket}
    DYNAMODB_TABLE: ${self:custom.dynamodb_table}

  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "s3:*"
       Resource: "arn:aws:s3:::${self:custom.bucket}/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.dynamodb_table}"

functions:
  pluginsService:
    handler: handler.handle
    events:
      - http:
          method: get
          path: /
          # private: true

# resources:
#   Resources:
#     DevToolPluginsS3Bucket:
#       Type: 'AWS::S3::Bucket'
#       Properties:
#         BucketName: ${self:custom.bucket}
#         # add additional custom bucket configuration here
#     DevToolApiKeysDynamoDbTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           AttributeName: secret
#           AttributeType: S
#         KeySchema:
#           AttributeName: secret
#           KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.DYNAMODB_TABLE}
